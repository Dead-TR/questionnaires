{"version":3,"file":"static/js/215.4f6710c7.chunk.js","mappings":"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","sources":["utils/fetch/index.ts","webpack://date/./src/pages/CreateProfile/style.module.scss?e15a","pages/CreateProfile/components/TextFields/index.tsx","pages/CreateProfile/index.tsx"],"sourcesContent":["export interface PostOptions {\n  headers?: HeadersInit;\n  variables?: Record<string, any>;\n}\n\nexport interface PostError {\n  message?: string;\n  [key: string]: any;\n}\n\ntype DefaultFetchResult<T> = {} & T;\n\nexport const postFetch = async <FetchResult>(\n  queryString: string,\n  options?: PostOptions,\n) => {\n  interface PostResult {\n    data?: DefaultFetchResult<FetchResult>;\n    error?: PostError;\n  }\n\n  const { headers, variables } = options || {};\n\n  try {\n    const queryHeaders = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      ...headers,\n    };\n    const queryBody = JSON.stringify({\n      ...variables,\n    });\n\n    const response = await fetch(queryString, {\n      method: \"POST\",\n      headers: queryHeaders,\n      body: queryBody,\n      cache: \"no-cache\",\n    });\n\n    const result = await response.json();\n\n    if (result.bad_token) {\n      localStorage.setItem(\"token\", \"\");\n    }\n    const newToken = result.new_token || result.login_token;\n    if (newToken) {\n      localStorage.setItem(\"token\", newToken);\n    }\n\n    const postResult = {} as PostResult;\n    if (result?.success) postResult.data = result;\n    else postResult.error = result;\n\n    return postResult;\n  } catch (error) {\n    const message = error || \"Something went wrong\";\n\n    return { error: { message } } as PostResult;\n  }\n};\n\nexport const getFetch = async <FetchResult>(queryString: string) => {\n  interface Result {\n    data?: DefaultFetchResult<FetchResult>;\n    error?: PostError;\n  }\n\n  try {\n    const response = await fetch(queryString, {\n      method: \"GET\",\n    });\n\n    const result = await response.json();\n\n    const postResult = {} as Result;\n    postResult.data = result;\n\n    return postResult;\n  } catch (error) {\n    const message = error || \"Something went wrong\";\n\n    return { error: { message } } as Result;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"style_root__ik7zY\",\"text\":\"style_text__J-Ilu\",\"activeCard\":\"style_activeCard__V8y43\",\"imgWrapper\":\"style_imgWrapper__V2Ma9\",\"textField\":\"style_textField__0EwNc\",\"textArea\":\"style_textArea__6YN7P\",\"avatar\":\"style_avatar__x8nM4\",\"load\":\"style_load__pxEUi\",\"name\":\"style_name__gWGQ7\",\"subTitle\":\"style_subTitle__f5ZIU\",\"helpAvatar\":\"style_helpAvatar__8G72h\",\"dateWrapper\":\"style_dateWrapper__V2+m+\",\"hideDate\":\"style_hideDate__BRPrJ\",\"dateFormat\":\"style_dateFormat__ifkKG\",\"error\":\"style_error__8T0SS\"};","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { Autocomplete, Box, TextField } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterMoment } from \"@mui/x-date-pickers/AdapterMoment\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport debounce from \"lodash.debounce\";\nimport dateformat from \"dateformat\";\nimport clsx from \"clsx\";\n\n//@ts-ignore\nimport moment from \"moment\";\n\nimport { ProfileState, Country, CountryFetch } from \"pages/CreateProfile/type\";\nimport { getFetch } from \"utils/fetch\";\nimport css from \"../../style.module.scss\";\n\nconst wait = debounce((f: () => void) => {\n  f();\n}, 50);\n\nmoment.updateLocale(\"en\", {\n  week: {\n    dow: 1,\n  },\n});\n\ninterface Props {\n  state: ProfileState;\n  setState: React.Dispatch<React.SetStateAction<ProfileState>>;\n}\n\nexport const TextFields: FC<Props> = ({ state, setState }) => {\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [showText, setShowText] = useState(true);\n  const input = useRef<HTMLInputElement>(null);\n\n  const handleChange = <K extends keyof typeof state>(\n    key: K,\n    value: (typeof state)[K],\n  ) => {\n    setState((old) => ({ ...old, [key]: value }));\n  };\n\n  const getCounty = (value: string) => {\n    setCountries([]);\n    const request = async () => {\n      if (!value) return;\n\n      const result = await getFetch<CountryFetch[]>(\n        `https://restcountries.com/v3.1/name/${value}`,\n      );\n\n      setCountries(\n        (result.data || [])?.map(({ flag, name: { common, official } }) => ({\n          flag,\n          name: official,\n        })),\n      );\n    };\n\n    wait(() => {\n      request();\n    });\n\n    handleChange(\"country\", value);\n  };\n\n  useEffect(() => {\n    if (!state.birthday) {\n      setShowText(true);\n    }\n\n    const blur = () => {\n      if (!state.birthday) {\n        setShowText(true);\n      }\n    };\n    const focus = () => setShowText(false);\n\n    input.current?.addEventListener(\"focus\", focus);\n    input.current?.addEventListener(\"blur\", blur);\n\n    return () => {\n      input.current?.removeEventListener(\"focus\", focus);\n      input.current?.removeEventListener(\"blur\", blur);\n    };\n  }, [state.birthday]);\n\n  return (\n    <Box className={css.textField}>\n      <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        value={state.name}\n        onChange={({ target }) => {\n          handleChange(\"name\", target.value);\n        }}\n        error={!state.name}\n      />\n      <div\n        className={clsx(\n          css.dateWrapper,\n          showText && css.hideDate,\n          !state.birthday && css.error,\n        )}>\n        <LocalizationProvider dateAdapter={AdapterMoment}>\n          <DatePicker\n            format=\"DD/MM/YYYY\"\n            onChange={(v: any) => {\n              const birth = v.valueOf();\n              handleChange(\"birthday\", birth);\n            }}\n            inputRef={input}\n          />\n        </LocalizationProvider>\n\n        {showText && (\n          <div className={css.dateFormat}>\n            <span>\n              {state.birthday\n                ? dateformat(state.birthday, \"dd/mm/yyyy\")\n                : \"DD/MM/YYYY\"}\n            </span>\n          </div>\n        )}\n      </div>\n      <TextField\n        label=\"Height (cm)\"\n        variant=\"outlined\"\n        onChange={({ target }) => {\n          handleChange(\"height\", target.value);\n        }}\n        value={state.height}\n      />\n      <TextField\n        label=\"Weight (kg)\"\n        variant=\"outlined\"\n        onChange={({ target }) => {\n          handleChange(\"weight\", target.value);\n        }}\n        value={state.weight}\n      />\n      <TextField\n        label=\"Children\"\n        type=\"number\"\n        variant=\"outlined\"\n        value={state.children}\n        defaultValue={state.children}\n        onChange={({ target }) => {\n          const amount = Number(target.value);\n          handleChange(\"children\", Math.max(0, amount));\n        }}\n      />\n      <Autocomplete\n        freeSolo\n        options={[\"Single\", \"Married\", \"Divorced\", \"Widowed\"]}\n        onChange={({ target }) => {\n          const value = (target as HTMLElement)?.innerText || \"\";\n          handleChange(\"marital\", value);\n        }}\n        onBlur={({ target }) => {\n          const value = (target as HTMLInputElement)?.value || \"\";\n          handleChange(\"marital\", value);\n        }}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Marital Status\" variant=\"outlined\" />\n        )}\n        value={state.marital}\n      />\n      <TextField\n        label=\"Job\"\n        variant=\"outlined\"\n        onChange={({ target }) => {\n          handleChange(\"job\", target.value);\n        }}\n        value={state.job}\n      />\n\n      <Autocomplete\n        freeSolo\n        open={!!countries.length}\n        options={countries.map(({ flag, name }) => `${flag} ${name}`)}\n        onChange={({ target }) => {\n          const value = (target as HTMLElement)?.innerText || \"\";\n          getCounty(value);\n        }}\n        onBlur={({ target }) => {\n          const value = (target as HTMLInputElement)?.value || \"\";\n          getCounty(value);\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Country\"\n            variant=\"outlined\"\n            onChange={({ target }) => {\n              getCounty(target.value);\n            }}\n          />\n        )}\n        value={state.country}\n      />\n\n      <textarea\n        className={clsx(css.textArea, \"form-control\")}\n        placeholder=\"Other\"\n        value={state.etc}\n        onChange={({ target }) => {\n          handleChange(\"etc\", target.value);\n        }}\n      />\n\n      <TextField\n        label=\"City\"\n        variant=\"outlined\"\n        value={state.city}\n        onChange={({ target }) => {\n          handleChange(\"city\", target.value);\n        }}\n      />\n    </Box>\n  );\n};\n","import { memo, useEffect, useRef, useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport clsx from \"clsx\";\nimport { Alert, Box, Button, Card, Container, Snackbar } from \"@mui/material\";\nimport { UploadResult, ref, uploadBytes } from \"firebase/storage\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { fromBlob } from \"image-resize-compress\";\n\nimport { getImgLinkFromFireBase } from \"utils/getImgLinkFromFireBase\";\nimport { fireBaseDataBase, fireBaseStorage } from \"config/fireBase\";\nimport { deletePhotosFromServer, sleep } from \"utils\";\nimport { Loader } from \"components/Loader\";\nimport { useProfiles } from \"containers\";\nimport { usePath } from \"hooks\";\n\nimport { TextFields } from \"./components\";\nimport { FrontProfile, PhotosState, ProfileState, ServerProfile } from \"./type\";\nimport css from \"./style.module.scss\";\n\nconst getFileTypeReg = /\\.[0-9a-z]+$/i;\n\nconst CreateProfile = () => {\n  const dragCard = useRef<HTMLDivElement>(null);\n\n  const { page } = usePath();\n  const [pageName, currentId] = page.path.substring(1).split(\"/\");\n  const isEditor = pageName === \"edit\";\n\n  const { setProfiles, profiles, loading: isLoad } = useProfiles();\n\n  const ID = useRef(\"0\");\n\n  const oldData = useRef({\n    name: \"\",\n    photo: \"\",\n  });\n  const [photos, setPhotos] = useState<PhotosState[]>([]);\n  const [deletedPhotos, setDeletedPhotos] = useState<string[]>([]);\n  const [state, setState] = useState<ProfileState>({\n    name: \"\",\n    birthday: 0,\n    children: 0,\n    marital: \"\",\n    job: \"\",\n    country: \"\",\n    city: \"\",\n    height: \"\",\n    weight: \"\",\n\n    etc: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [checkIsEditor, setCheckIsEditor] = useState(false);\n\n  const [error, setError] = useState(\"\");\n\n  const toggle = (add: boolean) => {\n    if (!dragCard.current) return;\n    const { classList } = dragCard.current;\n\n    if (add) classList.add(css.activeCard);\n    else classList.remove(css.activeCard);\n  };\n\n  const handleClear = () => {\n    oldData.current = {\n      name: state.name,\n      photo: photos[0]?.link,\n    };\n\n    setPhotos([]);\n    setDeletedPhotos([]);\n    setState({\n      name: \"\",\n      birthday: 0,\n      children: 0,\n      marital: \"\",\n      job: \"\",\n      country: \"\",\n      city: \"\",\n      height: \"\",\n      weight: \"\",\n      etc: \"\",\n    });\n    ID.current = (\"\" + Date.now()).substring(4);\n  };\n\n  const sendData = async () => {\n    setLoading(true);\n    try {\n      if (photos.length) {\n        const sendPhotos = photos.filter((p) => !!p.file); //do NOT send items for which there is no blob\n        const imgRefs = sendPhotos.map((photo, i) => {\n          const fileFormat = photo.file!.name.match(getFileTypeReg); //! -- because filter\n          if (!fileFormat) return null;\n\n          const imgName = `${ID.current}/${i}${fileFormat[0]}`;\n          return {\n            ref: ref(fireBaseStorage, imgName),\n            name: imgName,\n          };\n        });\n\n        const uploadResults = await Promise.all<UploadResult | null>(\n          imgRefs.map((element, i) => {\n            if (!element) return new Promise((r) => r(null));\n\n            const photo = photos[i];\n\n            return uploadBytes(element.ref, photo.file as File); //! -- because filter\n          }),\n        );\n\n        const serverProfilePhotos = [\n          ...photos\n            .filter((p) => !p.file && p.name)\n            .map(({ name = \"\" }) => ({ name, isAvatar: false })),\n          ...uploadResults.map((r) => ({\n            isAvatar: false,\n            name: r?.metadata.fullPath || \"\",\n          })),\n        ].map(({ name }, i) => ({\n          isAvatar: i === 0,\n          name,\n        }));\n\n        const newServerProfile: ServerProfile = {\n          ...state,\n          photos: serverProfilePhotos,\n        };\n\n        const result = await setDoc(\n          doc(fireBaseDataBase, \"profiles\", ID.current),\n          newServerProfile,\n        );\n\n        console.log(result, serverProfilePhotos);\n\n        const links = await Promise.all(\n          serverProfilePhotos.map(async (v) => {\n            const pathName = v.name || \"\";\n            const link = await getImgLinkFromFireBase(pathName);\n\n            return {\n              link,\n              name: pathName,\n            };\n          }),\n        );\n\n        if (!links) {\n          setError(\"Photos list is empty\");\n          throw new Error(`cant send Photos: ${JSON.stringify(links)}`);\n        }\n\n        const newFrontProfile: FrontProfile = {\n          ...state,\n          photos: links.map(({ link, name }, i) => ({\n            isAvatar: i === 0,\n            name,\n            link,\n          })),\n        };\n\n        setProfiles((old) => ({\n          ...old,\n          [ID.current]: newFrontProfile,\n        }));\n\n        deletePhotosFromServer(deletedPhotos);\n      }\n\n      handleClear();\n      setIsSuccess(true);\n    } catch (error) {\n      console.log(error);\n      setError(\"Error: \" + (error as Error).message);\n    }\n\n    setLoading(false);\n\n    if (isEditor) {\n      page.navigate(\"/\");\n    }\n  };\n\n  useEffect(() => {\n    ID.current = currentId || (\"\" + Date.now()).substring(4);\n    const currentProfile = profiles[currentId];\n\n    if (isEditor) {\n      if (!(!isLoad && currentProfile)) return;\n\n      const {\n        name = \"\",\n        birthday = 0,\n        children = 0,\n        city = \"\",\n        country = \"\",\n        job = \"\",\n        marital = \"\",\n        photos = [],\n        etc = \"\",\n        height = \"\",\n        weight = \"\",\n      } = currentProfile;\n\n      const prepareEditor = async () => {\n        setPhotos(\n          photos\n            .sort((a, b) => {\n              if (a.isAvatar) return -1;\n              if (b.isAvatar) return 1;\n              else return 0;\n            })\n            .map(({ link, name }) => ({ link, name })),\n        );\n        setState({\n          name,\n          birthday,\n          children,\n          marital,\n          job,\n          city,\n          country,\n          etc,\n          height,\n          weight,\n        });\n\n        await sleep(0);\n        setCheckIsEditor(true);\n      };\n\n      prepareEditor();\n    } else {\n      setCheckIsEditor(true);\n      handleClear();\n    }\n  }, [page, isLoad]);\n\n  return (\n    <>\n      <Container\n        sx={{\n          py: 5,\n          overflow: \"auto\",\n        }}\n        className={clsx(loading && css.load, css.root)}>\n        <Box sx={{ mx: \"auto\", maxWidth: 550 }}>\n          <Dropzone\n            onDrop={async (acceptedFiles) => {\n              const photos = await Promise.all(\n                acceptedFiles.map(async (file, i) => {\n                  const compressedFile = await fromBlob(\n                    file,\n                    90,\n                    \"auto\",\n                    900,\n                    \"webp\",\n                  );\n                  const preparedFile =\n                    compressedFile.size < file.size\n                      ? new File([compressedFile], `${i}.webp`, {\n                          type: \"image/webp\",\n                        })\n                      : file;\n\n                  return {\n                    file: preparedFile,\n                    link: URL.createObjectURL(preparedFile),\n                  };\n                }),\n              );\n\n              setPhotos((old) => [...old, ...photos]);\n            }}\n            onDragOver={() => toggle(true)}\n            onDragLeave={() => toggle(false)}>\n            {({ getRootProps, getInputProps }) => {\n              const props = getRootProps();\n\n              return (\n                <Card\n                  variant=\"outlined\"\n                  sx={{ p: 5 }}\n                  {...props}\n                  ref={dragCard}>\n                  <input {...getInputProps()} />\n                  <p className={css.text}>Add Photos</p>\n                </Card>\n              );\n            }}\n          </Dropzone>\n        </Box>\n\n        <Box sx={{ my: 4 }}>\n          <div className={css.imgWrapper}>\n            {photos.map((v, i) => {\n              return (\n                <img\n                  src={v.link}\n                  alt={\"\" + i}\n                  className={clsx(i === 0 && css.avatar)}\n                  loading=\"lazy\"\n                  onClick={() => {\n                    const updatePhotos = photos.sort((a, b) =>\n                      a.link === v.link ? -1 : b.link === v.link ? 1 : 0,\n                    );\n                    setPhotos([...updatePhotos]);\n                  }}\n                  onContextMenu={(e) => {\n                    e.preventDefault();\n                    const updatePhotos = photos.filter((img) => img !== v);\n                    setPhotos(updatePhotos);\n\n                    if (isEditor) setDeletedPhotos((old) => [...old, v.link]);\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Box>\n\n        {checkIsEditor ? <TextFields {...{ state, setState }} /> : null}\n\n        <Button\n          sx={{\n            m: \"0 auto\",\n            display: \"block\",\n            minWidth: 200,\n            p: 1.5,\n          }}\n          variant=\"contained\"\n          disabled={loading || !state.name || !photos.length}\n          onClick={sendData}>\n          {loading ? <Loader size={25} /> : <span>Send</span>}\n        </Button>\n      </Container>\n\n      <Snackbar\n        open={isSuccess || !!error}\n        autoHideDuration={2000}\n        onClose={() => {\n          setError(\"\");\n          setIsSuccess(false);\n        }}>\n        <Alert icon={false} severity={!error ? \"info\" : \"error\"}>\n          {!error ? (\n            <Box>\n              <span className={css.subTitle}>Profile created!</span>\n              <h1 className={css.name}>{oldData.current.name}</h1>\n              <img\n                src={oldData.current.photo}\n                alt=\"avatar\"\n                className={css.helpAvatar}\n              />\n            </Box>\n          ) : (\n            error\n          )}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default memo(CreateProfile);\n"],"names":["getFetch","queryString","fetch","method","response","json","result","postResult","data","message","error","wait","debounce","f","moment","week","dow","TextFields","state","setState","useState","countries","setCountries","showText","setShowText","input","useRef","handleChange","key","value","old","getCounty","request","map","flag","name","common","official","useEffect","birthday","blur","focus","current","addEventListener","removeEventListener","Box","className","css","TextField","label","variant","onChange","target","clsx","LocalizationProvider","dateAdapter","AdapterMoment","DatePicker","format","v","birth","valueOf","inputRef","dateformat","height","weight","type","children","defaultValue","amount","Number","Math","max","Autocomplete","freeSolo","options","innerText","onBlur","renderInput","params","marital","job","open","length","country","placeholder","etc","city","getFileTypeReg","CreateProfile","dragCard","page","usePath","path","substring","split","pageName","currentId","isEditor","useProfiles","setProfiles","profiles","isLoad","loading","ID","oldData","photo","photos","setPhotos","deletedPhotos","setDeletedPhotos","setLoading","isSuccess","setIsSuccess","checkIsEditor","setCheckIsEditor","setError","toggle","add","classList","remove","handleClear","link","Date","now","sendData","sendPhotos","filter","p","file","imgRefs","i","fileFormat","match","imgName","ref","fireBaseStorage","Promise","all","element","r","uploadBytes","uploadResults","serverProfilePhotos","isAvatar","metadata","fullPath","newServerProfile","setDoc","doc","fireBaseDataBase","console","log","pathName","getImgLinkFromFireBase","links","Error","JSON","stringify","newFrontProfile","deletePhotosFromServer","navigate","currentProfile","prepareEditor","sort","a","b","sleep","Container","sx","py","overflow","mx","maxWidth","onDrop","acceptedFiles","fromBlob","compressedFile","preparedFile","size","File","URL","createObjectURL","onDragOver","onDragLeave","getRootProps","getInputProps","props","Card","my","src","alt","onClick","updatePhotos","onContextMenu","e","preventDefault","img","Button","m","display","minWidth","disabled","Loader","Snackbar","autoHideDuration","onClose","Alert","icon","severity","memo"],"sourceRoot":""}